package io.FoF.SicBoResultsCheckerSpecPackage;

import io.FoF.SicBo;
import io.FoF.SicBoBetPayout;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

/**
 * Created by minlee on 5/13/16.
 */
public class SicBoBetPayoutSpec {

    SicBoBetPayout sicBoBetPayout;
    int[] dices = new int[3];
    int[] bets = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
    @Before
    public void initialize(){
        sicBoBetPayout = new SicBoBetPayout();
    }
    @Test
    public void returnPayoutForTriplesTest(){
        dices[0] = 1;
        dices[1] = 1;
        dices[2] = 1;
        int expectedValue = 31+181;
        int actualValue = sicBoBetPayout.returnPayoutForTriples(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 2;
        dices[1] = 2;
        dices[2] = 2;
        expectedValue = 212;
        actualValue = sicBoBetPayout.returnPayoutForTriples(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 3;
        dices[1] = 3;
        dices[2] = 3;
        expectedValue = 212;
        actualValue = sicBoBetPayout.returnPayoutForTriples(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 4;
        dices[1] = 4;
        dices[2] = 4;
        expectedValue = 212;
        actualValue = sicBoBetPayout.returnPayoutForTriples(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 5;
        dices[1] = 5;
        dices[2] = 5;
        expectedValue = 212;
        actualValue = sicBoBetPayout.returnPayoutForTriples(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 6;
        dices[1] = 6;
        dices[2] = 6;
        expectedValue = 212;
        actualValue = sicBoBetPayout.returnPayoutForTriples(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 1;
        dices[1] = 6;
        dices[2] = 6;
        expectedValue = 0;
        actualValue = sicBoBetPayout.returnPayoutForTriples(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
    }
    @Test
    public void returnPayoutForDoublesTest(){
        dices[0] = 0;
        dices[1] = 1;
        dices[2] = 1;
        int expectedValue = 12;
        int actualValue = sicBoBetPayout.returnPayoutForDoubles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 2;
        dices[2] = 2;
        expectedValue = 12;
        actualValue = sicBoBetPayout.returnPayoutForDoubles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 3;
        dices[2] = 3;
        expectedValue = 12;
        actualValue = sicBoBetPayout.returnPayoutForDoubles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 4;
        dices[2] = 4;
        expectedValue = 12;
        actualValue = sicBoBetPayout.returnPayoutForDoubles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 5;
        dices[2] = 5;
        expectedValue = 12;
        actualValue = sicBoBetPayout.returnPayoutForDoubles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 6;
        dices[2] = 6;
        expectedValue = 12;
        actualValue = sicBoBetPayout.returnPayoutForDoubles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 0;
        dices[2] = 6;
        expectedValue = 0;
        actualValue = sicBoBetPayout.returnPayoutForDoubles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
    }
    @Test
    public void returnPayoutForSinglesTest(){
        dices[0] = 0;
        dices[1] = 1;
        dices[2] = 1;
        int expectedValue = 3;
        int actualValue = sicBoBetPayout.returnPayoutForSingles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 2;
        dices[2] = 2;
        expectedValue = 3;
        actualValue = sicBoBetPayout.returnPayoutForSingles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 3;
        dices[2] = 3;
        expectedValue = 3;
        actualValue = sicBoBetPayout.returnPayoutForSingles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 4;
        dices[2] = 4;
        expectedValue = 3;
        actualValue = sicBoBetPayout.returnPayoutForSingles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 5;
        dices[2] = 5;
        expectedValue = 3;
        actualValue = sicBoBetPayout.returnPayoutForSingles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 6;
        dices[2] = 6;
        expectedValue = 3;
        actualValue = sicBoBetPayout.returnPayoutForSingles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 0;
        dices[2] = 6;
        expectedValue = 2;
        actualValue = sicBoBetPayout.returnPayoutForSingles(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
    }
    @Test
    public void returnPayoutForSumsTest(){
        dices[0] = 2;
        dices[1] = 1;
        dices[2] = 1;
        int expectedValue = 61;
        int actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 1;
        dices[1] = 2;
        dices[2] = 2;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 3;
        dices[2] = 3;
        expectedValue = 19;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 4;
        dices[2] = 4;
        expectedValue = 9;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 4;
        dices[2] = 5;
        expectedValue = 7;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 0;
        dices[1] = 4;
        dices[2] = 6;
        expectedValue = 7;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 5;
        dices[1] = 0;
        dices[2] = 6;
        expectedValue = 7;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 5;
        dices[1] = 1;
        dices[2] = 6;
        expectedValue = 7;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 5;
        dices[1] = 2;
        dices[2] = 6;
        expectedValue = 9;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 5;
        dices[1] = 3;
        dices[2] = 6;
        expectedValue = 13;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 5;
        dices[1] = 4;
        dices[2] = 6;
        expectedValue = 19;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 5;
        dices[1] = 5;
        dices[2] = 6;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 5;
        dices[1] = 6;
        dices[2] = 6;
        expectedValue = 61;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 5;
        dices[1] = 5;
        dices[2] = 5;
        expectedValue = 19;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 1;
        dices[1] = 1;
        dices[2] = 1;
        expectedValue = 0;
        actualValue = sicBoBetPayout.returnPayoutForSums(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
    }
    @Test
    public void returnPayoutForSpecific2Die() {
        dices[0] = 2;
        dices[1] = 1;
        dices[2] = 1;
        int expectedValue = 7;
        int actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 4;
        dices[1] = 1;
        dices[2] = 1;
        expectedValue = 7;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 5;
        dices[1] = 1;
        dices[2] = 1;
        expectedValue = 7;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 6;
        dices[1] = 1;
        dices[2] = 1;
        expectedValue = 7;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 3;
        dices[1] = 2;
        dices[2] = 1;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 2;
        dices[1] = 4;
        dices[2] = 1;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 2;
        dices[1] = 5;
        dices[2] = 1;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 2;
        dices[1] = 1;
        dices[2] = 6;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 3;
        dices[1] = 4;
        dices[2] = 1;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 3;
        dices[1] = 5;
        dices[2] = 1;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 3;
        dices[1] = 6;
        dices[2] = 1;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 4;
        dices[1] = 5;
        dices[2] = 1;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 1;
        dices[1] = 4;
        dices[2] = 6;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 3;
        dices[1] = 5;
        dices[2] = 6;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
        dices[0] = 4;
        dices[1] = 5;
        dices[2] = 6;
        expectedValue = 21;
        actualValue = sicBoBetPayout.returnPayoutForSpecific2Die(dices, bets);
        Assert.assertEquals(expectedValue,actualValue);
     }
     @Test
     public void returnPayoutForSmallBetTest() {
         int bets = 1;
         dices[0] = 2;
         dices[1] = 1;
         dices[2] = 1;
         int expectedValue = 2;
         int actualValue = sicBoBetPayout.returnPayoutForSmallBet(dices, bets);
         Assert.assertEquals(expectedValue, actualValue);
     }
     @Test
     public void returnPayoutForBigBetTest() {
        int bets = 1;
        dices[0] = 5;
        dices[1] = 6;
        dices[2] = 6;
        int expectedValue = 2;
        int actualValue = sicBoBetPayout.returnPayoutForBigBet(dices, bets);
        Assert.assertEquals(expectedValue, actualValue);
    }


}
